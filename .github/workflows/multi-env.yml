name: 'Deploy'

on:
  push:
    branches: [ "master", "develop" ]

jobs:
  staging:
    name: 'Deploy on Staging'
    runs-on: ubuntu-latest
    environment: staging
    if: ${{ github.ref == 'refs/heads/develop' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_length: ${{ vars.TF_VAR_length }}
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: terraform init
      - name: Terraform Format
        run: terraform fmt -check -diff -recursive
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        run: terraform plan -out tfplan
      - name: Terraform Apply
        run: terraform apply tfplan

  production:
    name: 'Deploy on Production'
    runs-on: ubuntu-latest
    environment: production
    if: ${{ github.ref == 'refs/heads/main' }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_length: ${{ vars.TF_VAR_length }}
      TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Terraform Init
        run: terraform init
      - name: Terraform Format
        run: terraform fmt -check -diff -recursive
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        run: terraform plan -out tfplan
      - name: Terraform Apply
        run: terraform apply tfplan
      - name: Terraform Destroy
        run: terraform destroy -auto-approve
